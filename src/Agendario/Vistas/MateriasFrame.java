/*
 * Ventana para el registro de Materias
 */
package Agendario.Vistas;

import Agendario.Conexion.ConexionPostgreSQL;
import Agendario.Datos.Materia;
import Agendario.Datos.Clase;
import javax.swing.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Miguel Ángel López Cervantes
 */
public class MateriasFrame extends javax.swing.JFrame {

    private Materia materia;
    private Clase[] clases;
    private int idUsuario;
    private String accion; //Agregar, Editar, Consultar
    
    /**
     * Creates new form MateriasFrame
     */
    public MateriasFrame(String accion, int idUsuario) {
        initComponents();
        this.accion = accion;
        this.idUsuario = idUsuario;  //Se guarda el idUsuario que este logeado al momento
        clases = new Clase[5];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        lblClave = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblDia = new javax.swing.JLabel();
        chkLunes = new javax.swing.JCheckBox();
        spnLunesInicio = new javax.swing.JSpinner();
        spnLunesFin = new javax.swing.JSpinner();
        chkMartes = new javax.swing.JCheckBox();
        spnMartesInicio = new javax.swing.JSpinner();
        spnMartesFin = new javax.swing.JSpinner();
        spnMiercolesInicio = new javax.swing.JSpinner();
        spnMiercolesFin = new javax.swing.JSpinner();
        chkMiercoles = new javax.swing.JCheckBox();
        spnJuevesInicio = new javax.swing.JSpinner();
        chkJueves = new javax.swing.JCheckBox();
        spnJuevesFin = new javax.swing.JSpinner();
        chkViernes = new javax.swing.JCheckBox();
        spnViernesFin = new javax.swing.JSpinner();
        spnViernesInicio = new javax.swing.JSpinner();
        lblHoraInicio = new javax.swing.JLabel();
        lblHoraFin = new javax.swing.JLabel();
        lblHorario = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Materias");
        setResizable(false);

        lblClave.setText("Clave:");

        lblNombre.setText("Nombre:");

        lblDia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDia.setText("Día");

        chkLunes.setText("Lunes");

        spnLunesInicio.setModel(new javax.swing.SpinnerNumberModel(7, 7, 21, 1));

        spnLunesFin.setModel(new javax.swing.SpinnerNumberModel(8, 8, 22, 1));

        chkMartes.setText("Martes");

        spnMartesInicio.setModel(new javax.swing.SpinnerNumberModel(7, 7, 21, 1));

        spnMartesFin.setModel(new javax.swing.SpinnerNumberModel(8, 8, 22, 1));

        spnMiercolesInicio.setModel(new javax.swing.SpinnerNumberModel(7, 7, 21, 1));

        spnMiercolesFin.setModel(new javax.swing.SpinnerNumberModel(8, 8, 22, 1));

        chkMiercoles.setText("Miércoles");

        spnJuevesInicio.setModel(new javax.swing.SpinnerNumberModel(7, 7, 21, 1));

        chkJueves.setText("Jueves");

        spnJuevesFin.setModel(new javax.swing.SpinnerNumberModel(8, 8, 22, 1));

        chkViernes.setText("Viernes");

        spnViernesFin.setModel(new javax.swing.SpinnerNumberModel(8, 8, 22, 1));

        spnViernesInicio.setModel(new javax.swing.SpinnerNumberModel(7, 7, 21, 1));

        lblHoraInicio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoraInicio.setText("Hora Inicio");

        lblHoraFin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoraFin.setText("HoraFin");

        lblHorario.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblHorario.setText("Horario");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblClave)
                                .addGap(34, 34, 34)
                                .addComponent(lblNombre))
                            .addComponent(lblHorario)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(lblDia))
                                    .addComponent(chkMiercoles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chkMartes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chkLunes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chkJueves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chkViernes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblHoraInicio)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblHoraFin))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spnViernesInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                            .addComponent(spnJuevesInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(spnMiercolesInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(spnMartesInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(spnLunesInicio, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spnLunesFin, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                            .addComponent(spnMartesFin)
                                            .addComponent(spnMiercolesFin)
                                            .addComponent(spnJuevesFin)
                                            .addComponent(spnViernesFin))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClave)
                    .addComponent(lblNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(lblHorario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDia)
                    .addComponent(lblHoraInicio)
                    .addComponent(lblHoraFin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkLunes)
                            .addComponent(spnLunesInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMartes)
                            .addComponent(spnMartesInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spnLunesFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnMartesFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMiercoles)
                    .addComponent(spnMiercolesInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMiercolesFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkJueves)
                    .addComponent(spnJuevesInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnJuevesFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkViernes)
                    .addComponent(spnViernesInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnViernesFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        //validar que las contraseñas coincidan
        if(validaHoras()){
            switch(accion.charAt(0)){
                case 'A': //Agregar
                    if(Materia.validaClave(txtClave.getText())){
                        creaArregloClases();
                        if(validaClases(-1)){ //-1 porque aun no hemos agregado la materia
                            materia = new Materia(txtClave.getText(),txtNombre.getText(),idUsuario,clases);
                            materia.inserta();
                            dispose();    
                        }
                        else{
                            JOptionPane.showMessageDialog(null,"El registro de materia crea conflictos de clase en su horario");
                        }
                    }
                    break;

                case 'E':
                    actualizaMateria();
                    if(validaClases(materia.getIdMateria())){
                        materia.actualiza();
                        dispose();    
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"El registro de materia crea conflictos de clase en su horario");
                    }                    
                    break;

                case 'C':  //En la consulta simplemente se cierra la ventana
                    dispose();
                    break;
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Hay incongruencia en las horas de clase ingresadas");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void creaArregloClases(){
        int cont;
        clases = new Clase[5];
        
        if(chkLunes.isSelected()){
            clases[0] = new Clase("Lunes",(int)spnLunesInicio.getValue(),(int)spnLunesFin.getValue());            
        }
        if(chkMartes.isSelected()){
            clases[1] = new Clase("Martes",(int)spnMartesInicio.getValue(),(int)spnMartesFin.getValue());            
        }
        if(chkMiercoles.isSelected()){
            clases[2] = new Clase("Miercoles",(int)spnMiercolesInicio.getValue(),(int)spnMiercolesFin.getValue());            
        }
        if(chkJueves.isSelected()){
            clases[3] = new Clase("Jueves",(int)spnJuevesInicio.getValue(),(int)spnJuevesFin.getValue());            
        }
        if(chkViernes.isSelected()){
            clases[4] = new Clase("Viernes",(int)spnViernesInicio.getValue(),(int)spnViernesFin.getValue());            
        }    
    }
    
    public void llenarCamposFrame(ResultSet rs){
        //Tomar los datos del ResultSet y ponerlos en el Frame y en usuario
        materia = new Materia();
        try {   
            txtClave.setText(rs.getString("clave"));
            txtNombre.setText(rs.getString("materia"));
            llenarComponentesClases(rs.getInt("idmateria"));
            
            materia.setIdMateria(rs.getInt("idmateria"));
            materia.setClave(rs.getString("clave"));
            materia.setNombre(rs.getString("materia"));
            materia.setIdUsuario(rs.getInt("idusuario"));      
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error: " + ex.getMessage());
        }
    }
    
    private void actualizaMateria(){   
        materia.setClave(txtClave.getText());     
        materia.setNombre(txtNombre.getText());
        materia.setIdUsuario(idUsuario);
        creaArregloClases();
        materia.setClases(clases);
    }
    
    private void llenarComponentesClases(int idMateria){
        ResultSet rs;
        
        //traer los registros de clases de la materia
        rs = ConexionPostgreSQL.obtenerRegistro("clase", "idmateria = " + idMateria);
        
        try {
            //Recorrer registro y llenar campos materia
            while(rs.next()){
                if(rs.getString("dia").equalsIgnoreCase("Lunes")){
                    chkLunes.setSelected(true);
                    spnLunesInicio.setValue(rs.getInt("horainicio"));
                    spnLunesFin.setValue(rs.getInt("horafin"));
                }
                else if(rs.getString("dia").equalsIgnoreCase("Martes")){
                    chkMartes.setSelected(true);
                    spnMartesInicio.setValue(rs.getInt("horainicio"));
                    spnMartesFin.setValue(rs.getInt("horafin"));
                }
                else if(rs.getString("dia").equalsIgnoreCase("Miercoles")){
                    chkMiercoles.setSelected(true);
                    spnMiercolesInicio.setValue(rs.getInt("horainicio"));
                    spnMiercolesFin.setValue(rs.getInt("horafin"));
                }
                else if(rs.getString("dia").equalsIgnoreCase("Jueves")){
                    chkJueves.setSelected(true);
                    spnJuevesInicio.setValue(rs.getInt("horainicio"));
                    spnJuevesFin.setValue(rs.getInt("horafin"));
                }
                else if(rs.getString("dia").equalsIgnoreCase("Viernes")){
                    chkViernes.setSelected(true);
                    spnViernesInicio.setValue(rs.getInt("horainicio"));
                    spnViernesFin.setValue(rs.getInt("horafin"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error: " + ex.getMessage());
        }
        
    }
    
    public void inhabilitaCampos(){
        txtClave.setEditable(false);
        txtNombre.setEditable(false);
        chkLunes.setEnabled(false);
        chkMartes.setEnabled(false);
        chkMiercoles.setEnabled(false);
        chkJueves.setEnabled(false);
        chkViernes.setEnabled(false);
        spnLunesInicio.setEnabled(false);
        spnLunesFin.setEnabled(false);
        spnMartesInicio.setEnabled(false);
        spnMartesFin.setEnabled(false);
        spnMiercolesInicio.setEnabled(false);
        spnMiercolesFin.setEnabled(false);
        spnJuevesInicio.setEnabled(false);
        spnJuevesFin.setEnabled(false);
        spnViernesInicio.setEnabled(false);
        spnViernesFin.setEnabled(false);
    }
    
    private boolean validaClases(int idMateria){
        for(int i=0 ; i<5 ; i++){
            if(clases[i] != null){
                if(!validaClase(clases[i].getDia(),clases[i].getHoraInicio(),clases[i].getHoraFin(),idMateria)){
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean validaClase(String dia, int horaInicio, int horaFin,int idMateria){
        ResultSet rs;
        rs = ConexionPostgreSQL.obtenerRegistro("vclases", "dia = '" + dia + "' AND ((horainicio <= " + horaInicio + " AND horafin > " + horaInicio + ") OR (horainicio <= " + horaFin + " AND horafin > " + horaFin + ")) AND idMateria <> " + idMateria + " AND idUsuario = " + idUsuario);
        try {
            if(rs.next()){
                return false;
            }
            else{
                return true;
            }
        } catch (SQLException ex) {
            System.out.println("Error al validar clases: " + ex.getMessage());
        }
        return false;
    }
    
    private boolean validaHoras(){
        if(chkLunes.isSelected()){
            if((int)spnLunesInicio.getValue() >= (int)spnLunesFin.getValue()){
                return false;
            }
        }
        if(chkMartes.isSelected()){
            if((int)spnMartesInicio.getValue() >= (int)spnMartesFin.getValue()){
                return false;
            }
        }
        if(chkMiercoles.isSelected()){
            if((int)spnMiercolesInicio.getValue() >= (int)spnMiercolesFin.getValue()){
                return false;
            }
        }
        if(chkJueves.isSelected()){
            if((int)spnJuevesInicio.getValue() >= (int)spnJuevesFin.getValue()){
                return false;
            }
        }
        if(chkViernes.isSelected()){
            if((int)spnViernesInicio.getValue() >= (int)spnViernesFin.getValue()){
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MateriasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MateriasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MateriasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MateriasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MateriasFrame("Agregar",2).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox chkJueves;
    private javax.swing.JCheckBox chkLunes;
    private javax.swing.JCheckBox chkMartes;
    private javax.swing.JCheckBox chkMiercoles;
    private javax.swing.JCheckBox chkViernes;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblClave;
    private javax.swing.JLabel lblDia;
    private javax.swing.JLabel lblHoraFin;
    private javax.swing.JLabel lblHoraInicio;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JSpinner spnJuevesFin;
    private javax.swing.JSpinner spnJuevesInicio;
    private javax.swing.JSpinner spnLunesFin;
    private javax.swing.JSpinner spnLunesInicio;
    private javax.swing.JSpinner spnMartesFin;
    private javax.swing.JSpinner spnMartesInicio;
    private javax.swing.JSpinner spnMiercolesFin;
    private javax.swing.JSpinner spnMiercolesInicio;
    private javax.swing.JSpinner spnViernesFin;
    private javax.swing.JSpinner spnViernesInicio;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
